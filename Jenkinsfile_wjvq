pipeline {
    agent any
    environment{
        DOCKER_PASS = credentials('docker_pass')
        SONAR_TOKEN = credentials('sonar_token')
    }
    stages {
        stage('Test') {
            agent {
                docker {
                    image 'node:18-alpine3.16'
                }
            }
            steps {
                sh 'npm install'
                sh 'npm test'
            }
            post {
                always {
                    archiveArtifacts artifacts: 'tests/report.html, test/jest-html-reporters-attach, test/jest-html-reporters-attach/index.js, test/jest-html-reporters-attach/result.js', followSymlinks: false
                }
            }
        }
         stage('Code inspection') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh '/var/jenkins_home/.sonar/sonar-scanner-4.7.0.2747-linux/bin/sonar-scanner \
                        -Dsonar.organization=at20graphql \
                        -Dsonar.projectKey=at20graph \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=https://sonarcloud.io'
                   }

            }
        }
        stage('Quality gate') {
           steps {
              timeout(time: 600, unit: 'SECONDS') {
              script {
                    def qg = waitForQualityGate()
                    sh "echo ${qg.status}"
                    if (qg.status != 'OK') {
                    error "Pipeline aborted due to quality gate failure: ${qg.status}"
                    }
                }
              }
            }
        }
        stage('Package'){
            steps {
                sh 'docker build -t graphql-service-wjvq .'
            }
        }
        stage('Publish'){
            steps {
                sh 'docker login -u willvq -p $DOCKER_PASS'
                sh 'docker tag graphql-service-wjvq willvq/graphql'
                sh 'docker push willvq/graphql'
            }

        }
        stage('Deploytodev') {
            steps {
                sh 'docker compose -f docker-compose.prfv.yml up -d'
            }
        }
    }
    post {
        always {
            sh 'docker rmi $(docker images -f "dangling=true" -q)'
        }
    }
}
