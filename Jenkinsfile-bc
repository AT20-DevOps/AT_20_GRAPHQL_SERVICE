pipeline {
    agent any
     parameters {
        booleanParam(name: 'skip_stage', defaultValue: true, description: 'Set to true to skip stage')
    }
    environment {
        DOCKER_PASS = credentials('docker_pass')
        SONAR_TOKEN = credentials('sonar_token')
        TARGET_HOST ='192.168.56.70'
        TAG_VERSION=sh (script: "git rev-parse --short HEAD", returnStdout: true)
        GIT_COMMIT_HASH = sh (script: "git rev-parse --short HEAD", returnStdout: true)
    }
    stages {
        stage('Test') {
            //when { expression { params.skip_stage != true } }
            agent {
                docker {
                    image 'node:18-alpine3.16'
                }
            }
            steps {
                sh 'npm install'
                sh 'npm run test tests/'
                    }
            post {
                always {
                    archiveArtifacts artifacts: 'tests/report.html, tests/jest-html-reporters-attach/', followSymlinks: false
                        }
                    }
                }
        stage('Code inspection') {
            //when { expression { params.skip_stage != true } }
            steps {
                withSonarQubeEnv('sonar_scanner') {
                    sh '/var/jenkins_home/.sonar/sonar-scanner-4.7.0.2747-linux/bin/sonar-scanner \
                        -Dsonar.organization=at20-bdcc \
                        -Dsonar.projectKey=at20-bdcc_at20-devops \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=https://sonarcloud.io'
                   }
              
            }
        }
        
        stage('Quality gate') {
            //when { expression { params.skip_stage != true } }
            steps {
              timeout(time: 600, unit: 'SECONDS') {
              script {
                    def qg = waitForQualityGate()
                    sh "echo ${qg.status}"
                    if (qg.status != 'OK') {
                    error "Pipeline aborted due to quality gate failure: ${qg.status}"
                    }
                }
              }
            }
        }
        stage('Package'){
            steps{
                sh 'docker build -t graphql_service .'
                }
            }
        stage('Publish'){
            //when { expression { params.skip_stage != true } }
            steps{
                sh 'docker login -u bdcc10 -p ${DOCKER_PASS}'
                sh 'docker tag graphql_service bdcc10/bdcc-at20_graphql_service:${GIT_COMMIT_HASH}'
                sh 'docker push bdcc10/bdcc-at20_graphql_service:${GIT_COMMIT_HASH}'

                }
            }
        stage ("Wait-for-DockerHub") {
            steps{
                echo 'Waiting 10 seconds to allow docker hub to update'
                sleep(time:10,unit:"SECONDS")
            }
         
            }
        stage ('DeployToDev') {
            steps {
                sh 'echo ${GIT_COMMIT_HASH}'
                sh 'echo ${TAG_VERSION}'
                sh 'export TAG_VERSION=${GIT_COMMIT_HASH}'
                sh 'docker-compose -f docker-compose.dev.bdcc.yaml up -d'
            }
        }
         stage ('DeployToAuto') {
            when { expression { params.skip_stage != true } }
            steps {
                sh 'DOCKER_HOST=ssh://${TARGET_HOST} docker-compose -f docker-compose.dev.bdcc.yaml up -d'
            }
        }
    }

    post {
        always {
            sh 'docker image prune -a -f'
            sh 'docker system prune -a -f'
        }
    }
       
}
