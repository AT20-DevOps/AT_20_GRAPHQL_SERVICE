format_version: 10
pipelines:
  Test1:
    group: AT20_Graphql
    label_template: ${COUNT}
    lock_behavior: none
    display_order: -1
    environment_variables:
      GIT_COMMIT_HASH: 1.2
    secure_variables:
      SONAR_TOKEN: AES:BZKuFNen4zAfwGhpaVOjAg==:CJvY4wCTBClAVZIlu2Effb2WdxiD+rwpJ4S9jd3BQGaITagQhWJH0F78Re7Bhisa
      DOCKER_PASS: AES:gg3IEdeWQAPllSZwgGGirw==:cs2JoGlYYS9VYF2C3eH1Wg==
    materials:
      git-3705b1f:
        git: https://github.com/AT20-DevOps/AT_20_GRAPHQL_SERVICE.git
        shallow_clone: false
        auto_update: true
        branch: task11_wjvq
    stages:
    - Test:
        fetch_materials: true
        keep_artifacts: false
        clean_workspace: false
        approval:
          type: success
          allow_only_on_success: false
        jobs:
          unit-test:
            timeout: 0
            resources:
            - node
            tasks:
            - script: |
                npm install
                npm test
            artifacts:
            - build:
                source: tests/report.html
                destination: html_report
            - build:
                source: docker-compose.wjvq.yaml
            - build:
                source: .env
    - code-inspection:
        fetch_materials: true
        keep_artifacts: false
        clean_workspace: false
        approval:
          type: success
          allow_only_on_success: false
        jobs:
          sonar:
            timeout: 0
            resources:
            - node
            tasks:
            - script: |
                ls -la
                /godata/.sonar/sonar-scanner-4.7.0.2747-linux/bin/sonar-scanner -Dsonar.organization=at20graphql -Dsonar.projectKey=at20graph -Dsonar.sources=. -Dsonar.host.url=https://sonarcloud.io
    - PackageAndPublish:
        fetch_materials: true
        keep_artifacts: false
        clean_workspace: false
        approval:
          type: success
          allow_only_on_success: false
        jobs:
          unit-test:
            timeout: 0
            resources:
            - docker
            tasks:
            - fetch:
                is_file: true
                source: docker-compose.prfv.yaml
                stage: Test
                job: unit-test
                run_if: passed
            - script: |
                ls -la
                docker build -t graphql-service-wjvq .
                docker login -u willvq -p ${DOCKER_PASS}
                docker tag graphql-service-wjvq willvq/graphql:${GIT_COMMIT_HASH}
                docker push willvq/graphql:${GIT_COMMIT_HASH}
            artifacts:
            - build:
                source: docker-compose.prfv.yaml
            - build:
                source: .env
  Acceptance:
    group: AT20_Graphql
    label_template: ${COUNT}
    lock_behavior: none
    display_order: -1
    environment_variables:
      GIT_COMMIT_HASH: 1.2
    materials:
      Test1:
        pipeline: Test1
        stage: PackageAndPublish
    stages:
    - DeployToDev:
        fetch_materials: false
        keep_artifacts: false
        clean_workspace: false
        approval:
          type: success
          allow_only_on_success: false
        jobs:
          deployToDev:
            timeout: 0
            resources:
            - docker
            tasks:
            - fetch:
                pipeline: Test1
                stage: PackageAndPublish
                job: PackageAndPublish
                source: docker-compose.wjvq.yaml
                is_file: true
                run_if: passed
            - fetch:
                pipeline: Test1
                stage: PackageAndPublish
                job: PackageAndPublish
                source: .env
                is_file: true
                run_if: passed
            - script: |
                echo deploy here
                ls -la
                export TAG_VERSION="${GIT_COMMIT_HASH}" && docker-compose -f docker-compose.wjvq.yaml up -d
    - Smoke:
        fetch_materials: false
        keep_artifacts: false
        clean_workspace: false
        approval:
          type: success
          allow_only_on_success: false
        jobs:
          test:
            timeout: 0
            resources:
            - docker
            tasks:
            - script: |
                echo command to run smoke test

