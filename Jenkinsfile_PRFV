pipeline {
    agent any
    parameters {
        booleanParam(name: 'skip_stage', defaultValue: true, description: 'Set to true to skip stage')
    }
    environment {
        DOCKER_PASS = credentials('docker_pass')
        SONAR_TOKEN = credentials('sonar_token')
        TARGET_HOST = '192.168.1.17'
        TAG_VERSION = "1.0"
        GIT_COMMIT_HASH = sh (script: "git rev-parse --short HEAD", returnStdout: true).trim()
    }
    stages {
        stage('Test') {
            agent {
                docker 'node:18-alpine3.16'
            }
            steps {
                sh 'npm install'
                sh 'npm test'
            }
            post {
                always {
                    archiveArtifacts artifacts: 'tests/report.html, test/jest-html-reporters-attach/*', followSymlinks: false
                }
            }
        }
        stage('CodeInspection') {

            agent {
                docker 'sonarsource/sonar-scanner-cli'
            }
            steps {
                withSonarQubeEnv('sq1') {
                    sh 'sonar-scanner \
                            -Dsonar.organization=at20-graphql \
                            -Dsonar.projectKey=at20-PRFV \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=https://sonarcloud.io'
                }
            }
        }
        stage('Quality gate') {

            steps {
              timeout(time: 600, unit: 'SECONDS') {
              script {
                    def qg = waitForQualityGate()
                    sh "echo ${qg.status}"
                    if (qg.status != 'OK') {
                    error "Pipeline aborted due to quality gate failure: ${qg.status}"
                    }
                }
              }
            }
        }
    }
        stage('Package') {
           // when { expression { params.skip_test != true } }
            steps {
                sh 'docker build -t at20_graphql .'
            }
        }
        stage('Publish') {
            //when { expression { params.skip_test != true } }
            steps {
                //sh 'export TAG=$(git log --pretty=format:'%h' -n 1)'
                sh 'echo %GIT_COMMIT%'
                sh 'docker login -u pprfv -p ${DOCKER_PASS}'
                sh 'docker tag at20_graphql pprfv/pprfv:${GIT_COMMIT_HASH}'
                sh 'docker push pprfv/pprfv:${GIT_COMMIT_HASH}'
            }
        }
        stage('Deploytodev') {
            steps {
                //sh 'docker compose -f docker-compose.prfv.yml up -d'
                sh 'export TAG_VERSION=${GIT_COMMIT_HASH} && docker-compose -f docker-compose.prfv.yaml up -d'
            }
        }
        stage('DeployAuto') {
            steps {
                sh 'DOCKER_HOST=ssh://$TARGET_HOST export TAG_VERSION=${GIT_COMMIT_HASH} && docker-compose -f docker-compose.prfv.yaml up -d'
                sh 'echo command to run automation tests'
            }
        }

    }
    post {
        always {
            steps {
                script {
                    try {
                        sh 'docker rmi $(docker images -f "dangling=true" -q)'
                        sh 'docker system prune -a'
                    } catch (Exception e) {
                        echo 'Failed to execute the Docker command. Skipping.'
                        return
                    }
                }
            }
        }
    }
